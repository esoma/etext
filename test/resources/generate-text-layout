#!/usr/bin/env python3

# etext
import etext
from etext import FontFace
from etext import PrimaryAxisTextAlign
from etext import SecondaryAxisTextAlign

# click
import click

# emath
from emath import FVector2

# pillow
from PIL import Image
from PIL import ImageDraw

# python
import hashlib
from itertools import product
import json
from pathlib import Path
import shutil

RESOURCE_DIRECTORY = Path(__file__).parent
TEXT_LAYOUT_DIRECTORY = RESOURCE_DIRECTORY / "text-layout"

TEXT = [
    "abcdef",
    "hello\nworld",
    "a b c d e f g",
]
FONT_FILES = ["OpenSans-Regular.ttf"]
BREAK_TEXT = ["break_text_icu_line", "break_text_never"]
FONT_SIZE = [
    ("request_pixel_size", {"height": 12}),
    ("request_pixel_size", {"height": 24}),
]
MAX_LINE_SIZE = [None, 32, 99999]
LINE_HEIGHT = [None, 32]
IMAGE_SIZE = 512
HALF_IMAGE_SIZE = IMAGE_SIZE / 2


@click.command()
def main():
    shutil.rmtree(TEXT_LAYOUT_DIRECTORY)
    TEXT_LAYOUT_DIRECTORY.mkdir()

    for (
        text,
        font,
        break_text_name,
        max_line_size,
        p_align,
        s_align,
        (font_size_method_name, font_size_kwargs),
        line_height,
    ) in product(
        TEXT,
        FONT_FILES,
        BREAK_TEXT,
        MAX_LINE_SIZE,
        PrimaryAxisTextAlign,
        SecondaryAxisTextAlign,
        FONT_SIZE,
        LINE_HEIGHT,
    ):
        sha256 = hashlib.sha256()
        sha256.update(text.encode("utf8"))
        sha256.update(font.encode("utf8"))
        sha256.update(break_text_name.encode("utf8"))
        sha256.update(str(max_line_size).encode("utf8"))
        sha256.update(p_align.encode("utf8"))
        sha256.update(s_align.encode("utf8"))
        sha256.update(font_size_method_name.encode("utf8"))
        sha256.update(str(font_size_kwargs).encode("utf8"))
        sha256.update(str(line_height).encode("utf8"))
        name = sha256.hexdigest()

        with open(RESOURCE_DIRECTORY / font, "rb") as font_file:
            font_face = FontFace(font_file)

        break_text = getattr(etext, break_text_name)

        font_face_method = getattr(font_face, font_size_method_name)
        font_face_size = font_face_method(**font_size_kwargs)
        text_layout = font_face.layout_text(
            text,
            font_face_size,
            primary_axis_alignment=p_align,
            secondary_axis_alignment=s_align,
            max_line_size=max_line_size,
            break_text=break_text,
            origin=FVector2(HALF_IMAGE_SIZE),
            line_height=line_height,
        )

        image = Image.new(mode="RGB", size=(IMAGE_SIZE, IMAGE_SIZE))
        draw = ImageDraw.Draw(image)
        draw.line((HALF_IMAGE_SIZE, 0, HALF_IMAGE_SIZE, IMAGE_SIZE), width=1)
        draw.line((0, HALF_IMAGE_SIZE, IMAGE_SIZE, HALF_IMAGE_SIZE), width=1)

        for text_glyph in text_layout.glyphs:
            rendered_glyph = font_face.render_glyph(text_glyph.glyph_index, font_face_size)
            image_glyph = Image.frombytes("L", tuple(rendered_glyph.size), rendered_glyph.data)
            image.paste(
                image_glyph,
                tuple(round(d) for d in (text_glyph.position + rendered_glyph.bearing)),
            )

        for line in text_layout.lines:
            draw.rectangle(
                (
                    round(line.position.x),
                    round(line.position.y),
                    round(line.position.x + line.size.x),
                    round(line.position.y + line.size.y),
                ),
                outline="red",
                width=2,
            )

        draw.rectangle(
            (
                round(text_layout.position.x),
                round(text_layout.position.y),
                round(text_layout.position.x + text_layout.size.x),
                round(text_layout.position.y + text_layout.size.y),
            ),
            outline="green",
        )

        image.save(TEXT_LAYOUT_DIRECTORY / f"{name}.png")

        data = {
            "font": font,
            "size": {
                "method": font_size_method_name,
                "kwargs": font_size_kwargs,
            },
            "layout_text_kwargs": {
                "text": text,
                "primary_axis_alignment": p_align,
                "secondary_axis_alignment": s_align,
                "break_text": break_text_name,
                "max_line_size": max_line_size,
                "line_height": line_height,
            },
            "text_layout": {
                "position": tuple(text_layout.position),
                "size": tuple(text_layout.size),
                "lines": [
                    {
                        "position": tuple(line.position),
                        "size": tuple(line.size),
                        "glyphs": [
                            {
                                "character": glyph.character,
                                "glyph_index": glyph.glyph_index,
                                "position": tuple(glyph.position),
                                "size": tuple(glyph.size),
                            }
                            for glyph in line.glyphs
                        ],
                    }
                    for line in text_layout.lines
                ],
            },
        }
        with open(TEXT_LAYOUT_DIRECTORY / f"{name}.json", "w", encoding="utf8") as f:
            json.dump(data, f, indent="    ")


if __name__ == "__main__":
    main()
